# -*- coding: utf-8 -*-
"""Iris flower.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10niZfkv7zcwQ0a3QpzWMTsiNuzGJ7o5w
"""

# Written by: Sarah Afshar - 2024

"""# **Importing necessary libraries**"""

import numpy as np
from numpy import mean , std
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score,RepeatedKFold
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report , accuracy_score

"""  #   **Load the data**"""

# download iris data  and read it into a dataframe
url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'

columns = ['Sepal length', 'Sepal width', 'Petal length', 'Petal width', 'Class_labels']

df = pd.read_csv(url, names=columns)

df.head()

"""# **Analyze and visualize the dataset**"""

df.describe()

# Visualize the whole dataset
sns.pairplot(df, hue='Class_labels')

df.info()

"""# **Separate features and target**"""

X=df.drop(['Class_labels'],axis=1)
y=df['Class_labels']

X[0:2]

y[0:2]

"""# **Split the data to train and test dataset**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

"""# **Model training**"""

model = LogisticRegression(multi_class="multinomial", solver="lbfgs",max_iter= 500)

model

# Cross Validation K-Fold
cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=None)
n_scores = cross_val_score(model, X_train, y_train, scoring='accuracy', cv=cv, n_jobs=-1)
print("Mean Accuracy: %.3f (%.3f)" % (mean(n_scores), std(n_scores)))

model.fit(X_train,y_train)

"""# **Model Evaluation**"""

y_pred = model.predict(X_test)

acc=accuracy_score(y_test,y_pred)
print('accuracy score =',acc*100)

report = classification_report(y_test, y_pred)
print('classification report =', report)

report = classification_report(y_test, y_pred)
print('classification report =', report, end='')

report =classification_report(y_test,y_pred)
print('classification report =', report)
